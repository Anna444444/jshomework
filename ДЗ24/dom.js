// Модификации DOM – ключ к созданию «живых» страниц.
/*


document.createElement(tag)
Создаёт новый элемент с заданным тегом

document.createTextNode(text)
Создаёт новый текстовый узел с заданным текстом



================================================================



Чтобы элемент появился, нужно вставить его где-нибудь в document.
Методы вставки:

node.append(...nodes or strings) – добавляет узлы или строки в конец node
node.prepend(...nodes or strings) – вставляет узлы или строки в начало node
node.before(...nodes or strings) –- вставляет узлы или строки до node
node.after(...nodes or strings) –- вставляет узлы или строки после node
node.replaceWith(...nodes or strings) –- заменяет node заданными узлами или строками



=================================================================



Вставить HTML именно «как html», со всеми тегами и прочим, как делает это elem.innerHTML,
можно с помощью метода

elem.insertAdjacentHTML(where, html).

Первый параметр – это специальное слово, указывающее, куда по отношению к elem производить вставку. Значение должно быть одним из следующих:
"beforebegin" – вставить html непосредственно перед elem
"afterbegin" – вставить html в начало elem
"beforeend" – вставить html в конец elem
"afterend" – вставить html непосредственно после elem

Второй параметр – это HTML-строка, которая будет вставлена именно «как HTML»



==================================================================



У метода есть два брата:

elem.insertAdjacentText(where, text) – такой же синтаксис, но строка text вставляется «как текст», вместо HTML,
elem.insertAdjacentElement(where, elem) – такой же синтаксис, но вставляет элемент elem.

Они существуют, в основном, чтобы унифицировать синтаксис. На практике часто используется только insertAdjacentHTML.
Потому что для элементов и текста у есть методы append/prepend/before/after – их быстрее написать, и они могут вставлять как узлы, так и текст.



==================================================================



Для удаления узла есть метод node.remove()

Если нужно переместить элемент в другое место – нет необходимости удалять его со старого!
Все методы вставки автоматически удаляют узлы со старых мест.



==================================================================



Как вставить ещё один такой же элемент? Можно создать такой же элемент, и заполнить все его арибуты.
Когда элемент большой, быстрее и проще его клонировать.

elem.cloneNode(true)  создаёт «глубокий» клон элемента – со всеми атрибутами и дочерними элементами
elem.cloneNode(false)  создаёт клон без дочерних элементов.



==================================================================



Устаревшие методы:

parentElem.appendChild(node)
parentElem.insertBefore(node, nextSibling)
parentElem.replaceChild(node, oldChild)
parentElem.removeChild(node)

Все эти методы возвращают вставленный/удалённый узел.










*/




